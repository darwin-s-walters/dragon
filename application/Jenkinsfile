pipeline {

	agent any

	environment {

		// SCM
		GIT_URL = "${GIT_URL ?: "https://github.com/ICFI/dragon.git"}"
		GIT_BRANCH = "${GIT_BRANCH ?: "origin/master"}"

		// Container
		imageName = 'dragon'
		serviceName = "$imageName"

		// Directories
		appCheckoutDir = "$WORKSPACE/app_checkout"
		appBuildDir = "$appCheckoutDir/application"
		analysisResultsDir = "$WORKSPACE/analysis_results"

		// ECS / ECR info
		// Cluster name is used to label resources to differentiate between deployments
		cluster = "mdas-prod"
		// Query the EC2 metadata service and return the current AWS region in which we're running
		region = sh (script: 'curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region', returnStdout: true).trim()
		// Name of the image including the ECR repo
		ecr_repo = "dragon"
		fqImageName = "${awsIdentity().account}.dkr.ecr.${region}.amazonaws.com/${ecr_repo}"
	}

	stages {

		stage('Preparation') {
			steps {
				dir(appCheckoutDir) {
					// $GIT_BRANCH looks like `origin/branch-name` so parse it.
					git url: "$GIT_URL", branch: "$GIT_BRANCH".tokenize("/")[1]
				}
				// cleanup from prior runs
				sh "rm -rf $analysisResultsDir"
				sh "mkdir $analysisResultsDir"
			}
		}

		stage('Build Image') {
			steps {
				dir(appBuildDir) {
					// sh 'set -x'
					sh "docker build -t ${imageName}:${env.BUILD_ID} -f ./container/Dockerfile ."
				}
			}
		}

		stage ('Publish Test Results') {
			steps {
				script {
					// find the intermediate build-stage image by its "test" label
					build_stage_image_id = sh (
						script: 'docker images --filter "label=test=true" -q',
						returnStdout: true
					).tokenize()[0]
				}
				println "pull analysis results from docker build stage image"
				// tag that biuld-stage image so we can run it
				sh "docker tag $build_stage_image_id analysis_results:latest"
				// run the image so we can get analysis results from it
				sh 'docker run --rm --name analysis_results -d analysis_results:latest tail -f /dev/null'
				// copy the analysis results locally
				sh "docker cp analysis_results:/app/build $analysisResultsDir"
				// the results have root ownership (from the container)
				sh "chown -R jenkins:jenkins $analysisResultsDir"
				// kill the container
				sh "docker stop analysis_results &"

				dir (analysisResultsDir){
					jacoco()
					// junit plugin wants "fresh" test results (a build with no changes
					//   will have test results with older dates).
					sh "touch build/test-results/test/*.xml"
					junit "build/test-results/test/*.xml"
					// findbugs canComputeNew: false, defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', pattern: '**/findbugs.xml', unHealthy: ''
					findbugs pattern: 'build/reports/findbugs/*.xml'
					// pmd canComputeNew: false, defaultEncoding: '', healthy: '', pattern: '**/pmd.xml', unHealthy: ''
					pmd pattern: 'build/reports/pmd/**/*.xml'
					// step([$class: 'AnalysisPublisher'])
				}
			}
		}

		stage('Push Image') {
			steps {
  			dir(appBuildDir) {

					sh "aws configure set default.region ${region}"
					sh "aws cloudformation deploy --template-file ./ecr-repository.yml --stack-name ecr-repository-${ecr_repo} --no-fail-on-empty-changeset --parameter-overrides RepositoryName=${ecr_repo}"
					sh "\$(aws ecr get-login --no-include-email)"
					sh "docker tag ${imageName}:${env.BUILD_ID} ${fqImageName}:${env.BUILD_ID}"
					sh "docker tag ${imageName}:${env.BUILD_ID} ${fqImageName}:latest"
					sh "docker push ${fqImageName}:${env.BUILD_ID}"
					sh "docker push ${fqImageName}:latest"
				}
			}
		}

		stage('Deploy Service') {
			steps {
			dir(appBuildDir) {

				//sh "aws ecs update-service --cluster ${cluster} --service ${serviceName} --force-new-deployment"
				sh """
				  export vpc=\$(aws cloudformation describe-stacks --stack-name ${cluster} | jq '.Stacks[0].Outputs[] | select(.OutputKey == "VPC") | .OutputValue' -r)
					export ecsListener=\$(aws cloudformation describe-stacks --stack-name ${cluster} | jq '.Stacks[0].Outputs[] | select(.OutputKey == "EcsListenerArn") | .OutputValue' -r)
				  aws cloudformation deploy --template-file ./service.yml --stack-name dragon-service \
					   --no-fail-on-empty-changeset \
						 --capabilities CAPABILITY_NAMED_IAM \
					   --parameter-overrides \
						      VPC=\${vpc} \
						      Cluster=${cluster} \
						      Listener=\${ecsListener} \
						      ecrImage=${fqImageName}:${env.BUILD_ID}
				"""
				}
			}
		}

	}

}
